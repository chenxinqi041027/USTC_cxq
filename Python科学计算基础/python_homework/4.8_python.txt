实验4.8
1.二分查找
Code:
def is_sorted(s):
    s1=sorted(s)
    if s1==s:
        return 1
    return 0

def qsort(s):
    if len(s) <= 1 : return s
    s_less=[];s_greater=[];s_equal=[]
    for k in s:
        if k<s[0]:
            s_less.append(k)
        elif k>s[0]:
            s_greater.append(k)
        else:
            s_equal.append(k)
        return qsort(s_less)+s_equal+qsort(s_greater)
    
def binary_search(s,low,high,k):
    while low<=high:
        mid=(low+high)//2
        if k==s[mid]: return mid
        elif s[mid]>k:
            high=mid-1
        elif s[mid]<k:low=mid+1
    return -1
    
    
s=[5,6,21,32,51,60,67,73,77,99]
if not is_sorted(s):
    s=qsort(s)
    print(s)

print(binary_search(s, 0, len(s)-1, 5))
print(binary_search(s, 0, len(s)-1, 31))
print(binary_search(s, 0, len(s)-1, 99))
print(binary_search(s, 0, len(s)-1, 64))
print(binary_search(s, 0, len(s)-1, 51))

Running results:
In[1]:runfile('C:/Users/28932/.spyder-py3/temp.py', wdir='C:/Users/28932/.spyder-py3')
0
-1
9
-1
4

2.计算Fibonacci数列的递归方法的重复计算
Code：
d=dict()
for i in range(10,-1,-1):
    d[i]=0
    
def F(n):
    d[n]+=1
    if n<=1:
        return 1
    return F(n-1)+F(n-2)

F(10)
print(d)

Running results:
In[1]:runfile('C:/Users/28932/.spyder-py3/temp.py', wdir='C:/Users/28932/.spyder-py3')
{10: 1, 9: 1, 8: 2, 7: 3, 6: 5, 5: 8, 4: 13, 3: 21, 2: 34, 1: 55, 0: 34}

3.有理数的四则运算
Code：
"""
Module for performing arithmetic operations for rational numbers.

To run the module, user needs to supply three named parameters:
1. op stands for the operation:
    add for addition
    sub for subtraction
    mul for multiplication
    div for division
2. x stands for the first operand
3. y stands for the second operand

x and y must be enclosed in paired parentheses.

For example:

>>> run rational.py --op add --x (2/3) --y (-70/40)
-13/12
>>> run rational.py --op sub --x (-20/3) --y (120/470)
-976/141
>>> run rational.py --op mul --x (-6/19) --y (-114/18)
2/1
>>> run rational.py --op div --x (-6/19) --y (-114/-28)
-28/361
"""

import sys, math

def test_all_functions():  
    l_x=['(2/3)','(-20/3)','(-6/19)','(-6/19)']
    l_y=['(-70/40)','(120/470)','(-114/18)','(-114/-28)']
    l_op=['add','sub','mul','div']
    f = {'add':add, 'sub':sub, 'mul':mul, 'div':div}
    for i in range(4):
        l_x[i]=get_rational(l_x[i])
        l_y[i]=get_rational(l_y[i])
        print(f[l_op[i]](l_x[i],l_y[i]))
        

def gcd(a, b):  
    while a != b:
        if a > b:
            a -= b
        else:
            b -= a
    return a

def reduce(n, d):  
    if n == 0:
        d = 1
    else:
        m = gcd(abs(n), abs(d))
        n //= m
        d //= m
    if n<0 and d<0:
        n=abs(n);d=abs(d)
    if d<0:
        n=n*-1;d=abs(d)
    return [n, d]

def add(x, y):  
    nx, dx = x
    ny, dy = y
    return reduce(nx*dy + ny*dx, dx*dy)

def sub(x, y):
    ny, dy = y
    return add(x, [-ny,dy])

def mul(x, y):  
    nx, dx = x
    ny, dy = y
    return reduce(nx*ny, dx*dy)

def div(x, y):
    ny, dy = y
    return mul(x, [dy,ny])

def output(x): 
    nx,dx = x
    print(nx,'/',dx)

def get_rational(s):  
    s = s.lstrip('(')
    s = s.rstrip(')')       
    nums = s.split('/')
    n, d = int(nums[0]), int(nums[1])
    return [n, d]

if __name__ == '__main__':
    if len(sys.argv) == 1:
        print(__doc__)
    elif len(sys.argv) == 2 and sys.argv[1] == '-h':
        print(__doc__)
    elif len(sys.argv) == 2 and sys.argv[1] == 'test':
        test_all_functions()
    else:
        import argparse
        parser = argparse.ArgumentParser()
        parser.add_argument('--op', type=str)
        parser.add_argument('--x', type=str)
        parser.add_argument('--y', type=str)
        args = parser.parse_args()
        op = args.op
        x = get_rational(args.x); y = get_rational(args.y)
        f = {'add':add, 'sub':sub, 'mul':mul, 'div':div}
        output(f[op](x, y))

Running results：
In[1]:runfile('C:/Users/28932/Desktop/实验四/rational.py', wdir='C:/Users/28932/Desktop/实验四')

Module for performing arithmetic operations for rational numbers.

To run the module, user needs to supply three named parameters:
1. op stands for the operation:
    add for addition
    sub for subtraction
    mul for multiplication
    div for division
2. x stands for the first operand
3. y stands for the second operand

x and y must be enclosed in paired parentheses.

For example:

run rational.py --op add --x (2/3) --y (-70/40)
-13/12
run rational.py --op sub --x (-20/3) --y (120/470)
-976/141
run rational.py --op mul --x (-6/19) --y (-114/18)
2/1
run rational.py --op div --x (-6/19) --y (-114/-28)
-28/361


In[2]:run rational.py --op add --x (2/3) --y (-70/40)
-13 / 12

In[3]:run rational.py --op sub --x (-20/3) --y (120/470)
-976 / 141

In[4]:run rational.py --op mul --x (-6/19) --y (-114/18)
2 / 1

In[5]:run rational.py --op div --x (-6/19) --y (-114/-28)
-28 / 361